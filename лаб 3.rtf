{\rtf1\ansi\ansicpg1251\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh13860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \uc0\u1051 \u1072 \u1073  3\
\uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  1 \u1087 \u1080 \u1090 \u1086 \u1085 
\f1\b0 \
\
import numpy as np\
\
def f(x):\
    return x**4 * (1 + x)**(-1)\
\
# \uc0\u1087 \u1088 \u1077 \u1076 \u1077 \u1083 \u1099  \u1080 \u1085 \u1090 \u1077 \u1075 \u1088 \u1072 \u1083 \u1072 \
a = 1\
b = 2\
\
e = 10**-6\
\
# \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1086 \u1087 \u1088 \u1077 \u1076 \u1077 \u1083 \u1077 \u1085 \u1080 \u1103  \u1087 \u1088 \u1103 \u1084 \u1086 \u1091 \u1075 \u1086 \u1083 \u1100 \u1085 \u1080 \u1082 \u1072  \
def rectangular(a, b, e):\
    h = (b - a) / 1000\
    sum = 0\
    for i in range(1000):\
        x = a + i * h\
        sum += f(x) * h\
    return sum\
\
\
# \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1090 \u1088 \u1072 \u1087 \u1077 \u1094 \u1080 \u1080  \
def trapezoidal(a, b, e):\
    h = (b - a) / 1000\
    sum = 0.5 * (f(a) + f(b))\
    for i in range(1000):\
        x = a + i * h\
        sum += f(x) * h\
    return sum * h\
\
# \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1057 \u1080 \u1084 \u1087 \u1089 \u1086 \u1085 \u1072  (\u1087 \u1072 \u1088 \u1072 \u1073 \u1086 \u1083 \u1080 \u1095 \u1077 \u1089 \u1082 \u1080 \u1081 )\
def simpson(a,b,e):\
    h = (b - a) / 3\
    sum = f(a) + f(b)\
    for i in range(1, 2):\
     x = a + i * h\
     sum += 2 * f(x)\
    for i in range(3, 3):\
     x = a + i * h\
     sum += 4 * f(x)\
    return sum * h / 3\
\
rect_int = rectangular(a, b, e)\
trap_int = trapezoidal(a, b, e)\
simp_int = simpson(a, b, e)\
\
print("\uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1087 \u1088 \u1103 \u1084 \u1086 \u1091 \u1075 \u1086 \u1083 \u1100 \u1085 \u1080 \u1082 \u1072 :", rect_int)\
print("\uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1090 \u1088 \u1072 \u1087 \u1077 \u1094 \u1080 \u1080 :", trap_int)\
print("\uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1057 \u1080 \u1084 \u1087 \u1089 \u1086 \u1085 \u1072 ", simp_int)\
\

\f0\b (?)\uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  2 \u1089 ++
\f1\b0 \
\
#include <iostream>\
#include <cmath>\
\
double f(double x) \{\
    return exp(-2*x) * sin(x);\
\}\
\
// \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1087 \u1088 \u1103 \u1084 \u1086 \u1091 \u1075 \u1086 \u1083 \u1100 \u1085 \u1080 \u1082 \u1086 \u1074 \
double rectangleMethod(double a, double b, int n) \{\
    double h = (b - a) / n;\
    double sum = 0.0;\
    for (int i = 0; i < n; i++) \{\
        sum += f(a + i*h + h/2);\
    \}\
    return h * sum;\
\}\
\
// \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1090 \u1088 \u1072 \u1087 \u1077 \u1094 \u1080 \u1081 \
double trapezoidalMethod(double a, double b, int n) \{\
    double h = (b - a) / n;\
    double sum = 0.5 * (f(a) + f(b));\
    for (int i = 1; i < n; i++) \{\
        sum += f(a + i*h);\
    \}\
    return h * sum;\
\}\
\
// \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1057 \u1080 \u1084 \u1087 \u1089 \u1086 \u1085 \u1072 \
double simpsonsMethod(double a, double b, int n) \{\
    double h = (b - a) / n;\
    double sum1 = 0.0;\
    double sum2 = 0.0;\
    for (int i = 1; i < n; i += 2) \{\
        sum1 += f(a + i*h);\
    \}\
    for (int i = 2; i < n-1; i += 2) \{\
        sum2 += f(a + i*h);\
    \}\
    return h/3 * (f(a) + 4*sum1 + 2*sum2 + f(b));\
\}\
\
int main() \{\
    double a = 0.0; // \uc0\u1053 \u1080 \u1078 \u1085 \u1080 \u1081  \u1087 \u1088 \u1077 \u1076 \u1077 \u1083  \u1080 \u1085 \u1090 \u1077 \u1075 \u1088 \u1080 \u1088 \u1086 \u1074 \u1072 \u1085 \u1080 \u1103 \
    double resultRect = rectangleMethod(a, 100, 1000000); // \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1087 \u1088 \u1103 \u1084 \u1086 \u1091 \u1075 \u1086 \u1083 \u1100 \u1085 \u1080 \u1082 \u1086 \u1074 \
    double resultTrap = trapezoidalMethod(a, 100, 1000000); // \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1090 \u1088 \u1072 \u1087 \u1077 \u1094 \u1080 \u1081 \
    double resultSimpson = simpsonsMethod(a, 100, 1000000); // \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1057 \u1080 \u1084 \u1087 \u1089 \u1086 \u1085 \u1072 \
    std::cout << "\uc0\u1047 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  \u1080 \u1085 \u1090 \u1077 \u1075 \u1088 \u1072 \u1083 \u1072  \u1084 \u1077 \u1090 \u1086 \u1076 \u1086 \u1084  \u1087 \u1088 \u1103 \u1084 \u1086 \u1091 \u1075 \u1086 \u1083 \u1100 \u1085 \u1080 \u1082 \u1086 \u1074 : " << resultRect << std::endl;\
    std::cout << "\uc0\u1047 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  \u1080 \u1085 \u1090 \u1077 \u1075 \u1088 \u1072 \u1083 \u1072  \u1084 \u1077 \u1090 \u1086 \u1076 \u1086 \u1084  \u1090 \u1088 \u1072 \u1087 \u1077 \u1094 \u1080 \u1081 : " << resultTrap << std::endl;\
    std::cout << "\uc0\u1047 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  \u1080 \u1085 \u1090 \u1077 \u1075 \u1088 \u1072 \u1083 \u1072  \u1084 \u1077 \u1090 \u1086 \u1076 \u1086 \u1084  \u1057 \u1080 \u1084 \u1087 \u1089 \u1086 \u1085 \u1072 : " << resultSimpson << std::endl;\
    return 0;\
\}\
\

\f0\b \uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  3 \u1087 \u1080 \u1090 \u1086 \u1085 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 \
def calculate_series(precision):\
    sum_value = 0\
    k = 1\
    term_value = 1  \
\
    while abs(term_value) > precision:\
        term_value = 1 / (2**(k-1)) + ((-1)**(k-1)) / (2 * 3**(k-1))\
        sum_value += term_value\
        k += 1\
\
    return sum_value\
\
precision = 1e-6\
result = calculate_series(precision)\
print(result)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 \uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  4 \u1089 ++\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf0 #include <iostream>\
#include <cmath>\
\
double calculateSeries(double x, double precision) \{\
    double sum = 0.0;\
    double term = 0.0;\
    int k = 1;\
\
    do \{\
        term = pow(-1, k) / (sin(k * x) + 1 + pow(k, 2));\
        sum += term;\
        k++;\
    \} while (abs(term) > precision);\
\
    return sum;\
\}\
\
int main() \{\
    double x = 1.5; // \uc0\u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  x, \u1076 \u1083 \u1103  \u1082 \u1086 \u1090 \u1086 \u1088 \u1086 \u1075 \u1086  \u1084 \u1099  \u1074 \u1099 \u1095 \u1080 \u1089 \u1083 \u1103 \u1077 \u1084  \u1089 \u1091 \u1084 \u1084 \u1091 \
    double precision = 1e-6;\
    double result = calculateSeries(x, precision);\
    std::cout << "\uc0\u1057 \u1091 \u1084 \u1084 \u1072  \u1088 \u1103 \u1076 \u1072  \u1076 \u1083 \u1103  x = " << x << " \u1089  \u1090 \u1086 \u1095 \u1085 \u1086 \u1089 \u1090 \u1100 \u1102  " << precision << " \u1088 \u1072 \u1074 \u1085 \u1072 : " << result << std::endl;\
    return 0;\
\}\
}